# HAProxy Global Load Balancer Configuration
# Multi-region deployment for WinTrades trading platform

global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Statistics Interface
frontend stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:WinTrades2024!

# Main Frontend - HTTPS
frontend wintradesgo_https
    bind *:443 ssl crt /etc/ssl/private/wintradesgo.pem
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Security Headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Geographic Routing based on Client IP
    acl is_us_client src -f /etc/haproxy/geo/us_ips.txt
    acl is_eu_client src -f /etc/haproxy/geo/eu_ips.txt
    acl is_ap_client src -f /etc/haproxy/geo/ap_ips.txt
    
    # API Endpoints
    acl is_api path_beg /api/
    acl is_websocket hdr(Upgrade) -i websocket
    
    # Static Content
    acl is_static path_beg /assets/ /images/ /css/ /js/
    
    # Route to appropriate backend based on geography and content type
    use_backend api_us_east if is_api is_us_client
    use_backend api_eu_west if is_api is_eu_client
    use_backend api_asia_pacific if is_api is_ap_client
    
    use_backend cdn_static if is_static
    use_backend websocket_cluster if is_websocket
    
    # Default geographic routing for web content
    use_backend web_us_east if is_us_client
    use_backend web_eu_west if is_eu_client
    use_backend web_asia_pacific if is_ap_client
    
    # Fallback to closest region based on latency
    default_backend web_global

# HTTP Frontend - Redirect to HTTPS
frontend wintradesgo_http
    bind *:80
    redirect scheme https code 301

# Backend Clusters by Region

# US East Coast
backend web_us_east
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server app-us-1 app_us_east:80 check inter 5s fall 3 rise 2
    server app-us-2 app_us_east:80 check inter 5s fall 3 rise 2
    server app-us-3 app_us_east:80 check inter 5s fall 3 rise 2

backend api_us_east
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    # Sticky sessions for trading operations
    cookie SERVERID insert indirect nocache
    
    server api-us-1 app_us_east:80 check inter 5s fall 3 rise 2 cookie us1
    server api-us-2 app_us_east:80 check inter 5s fall 3 rise 2 cookie us2
    server api-us-3 app_us_east:80 check inter 5s fall 3 rise 2 cookie us3

# Europe West
backend web_eu_west
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server app-eu-1 app_eu_west:80 check inter 5s fall 3 rise 2
    server app-eu-2 app_eu_west:80 check inter 5s fall 3 rise 2
    server app-eu-3 app_eu_west:80 check inter 5s fall 3 rise 2

backend api_eu_west
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    cookie SERVERID insert indirect nocache
    
    server api-eu-1 app_eu_west:80 check inter 5s fall 3 rise 2 cookie eu1
    server api-eu-2 app_eu_west:80 check inter 5s fall 3 rise 2 cookie eu2
    server api-eu-3 app_eu_west:80 check inter 5s fall 3 rise 2 cookie eu3

# Asia Pacific
backend web_asia_pacific
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server app-ap-1 app_asia_pacific:80 check inter 5s fall 3 rise 2
    server app-ap-2 app_asia_pacific:80 check inter 5s fall 3 rise 2
    server app-ap-3 app_asia_pacific:80 check inter 5s fall 3 rise 2

backend api_asia_pacific
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    cookie SERVERID insert indirect nocache
    
    server api-ap-1 app_asia_pacific:80 check inter 5s fall 3 rise 2 cookie ap1
    server api-ap-2 app_asia_pacific:80 check inter 5s fall 3 rise 2 cookie ap2
    server api-ap-3 app_asia_pacific:80 check inter 5s fall 3 rise 2 cookie ap3

# Global Fallback (Latency-based routing)
backend web_global
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Primary regions with different weights based on capacity
    server app-us-global app_us_east:80 check inter 5s fall 3 rise 2 weight 100
    server app-eu-global app_eu_west:80 check inter 5s fall 3 rise 2 weight 100
    server app-ap-global app_asia_pacific:80 check inter 5s fall 3 rise 2 weight 100

# CDN for Static Content
backend cdn_static
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Cache servers
    server cdn-1 cdn_cache:80 check inter 10s fall 2 rise 1
    server cdn-2 cdn_cache:80 check inter 10s fall 2 rise 1
    server cdn-3 cdn_cache:80 check inter 10s fall 2 rise 1

# WebSocket Cluster for Real-time Trading
backend websocket_cluster
    balance source
    option httpchk GET /ws/health
    http-check expect status 200
    
    # All regions for WebSocket connections
    server ws-us app_us_east:80 check inter 5s fall 3 rise 2
    server ws-eu app_eu_west:80 check inter 5s fall 3 rise 2
    server ws-ap app_asia_pacific:80 check inter 5s fall 3 rise 2

# Error Pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http