# WinTrades Go - Production Docker Configuration
version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wintradesgo-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./src:/var/www/html
      - ./config:/var/www/config
      - ./logs:/var/www/logs
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_NAME=wintradesgo_prod
      - DB_USER=wintrader_user
      - DB_PASS=${DB_PASSWORD}
      - REDIS_HOST=redis
      - API_RATE_LIMIT=1000
      - ML_MODELS_ENABLED=true
    depends_on:
      - database
      - redis
    networks:
      - wintradesgo-network
    restart: unless-stopped

  # Database - MySQL 8.0 with optimizations
  database:
    image: mysql:8.0
    container_name: wintradesgo-db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=wintradesgo_prod
      - MYSQL_USER=wintrader_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/config/mysql.cnf:/etc/mysql/conf.d/mysql.cnf
    ports:
      - "3306:3306"
    networks:
      - wintradesgo-network
    restart: unless-stopped
    command: >
      --innodb_buffer_pool_size=2G
      --innodb_log_file_size=512M
      --max_connections=1000
      --query_cache_size=256M

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: wintradesgo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - wintradesgo-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf

  # AI Scheduler Service
  ai-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: wintradesgo-ai
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_NAME=wintradesgo_prod
      - DB_USER=wintrader_user
      - DB_PASS=${DB_PASSWORD}
      - REDIS_HOST=redis
      - ML_PROCESSING_INTERVAL=180
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK}
    depends_on:
      - database
      - redis
    volumes:
      - ./ai:/app/ai
      - ./logs:/app/logs
    networks:
      - wintradesgo-network
    restart: unless-stopped

  # Load Balancer (NGINX)
  nginx:
    image: nginx:alpine
    container_name: wintradesgo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - wintradesgo-network
    restart: unless-stopped

  # Trading Engine Service
  trading-engine:
    build:
      context: .
      dockerfile: Dockerfile.trading
    container_name: wintradesgo-trading
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - REDIS_HOST=redis
      - PAPER_TRADING_MODE=true
      - RISK_MANAGEMENT_ENABLED=true
      - MAX_POSITION_SIZE=0.1
      - STOP_LOSS_PERCENTAGE=0.05
    depends_on:
      - database
      - redis
    volumes:
      - ./trading:/app/trading
      - ./logs:/app/logs
    networks:
      - wintradesgo-network
    restart: unless-stopped

  # Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus
    container_name: wintradesgo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - wintradesgo-network

  grafana:
    image: grafana/grafana
    container_name: wintradesgo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - wintradesgo-network

volumes:
  db_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  wintradesgo-network:
    driver: bridge